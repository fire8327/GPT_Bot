import os
import asyncio
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
from db import Database

load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPEN_ROUTER_API_KEY = os.getenv('OPEN_ROUTER_API_KEY')

db = Database()
AI_MODEL = "openai/gpt-4o-mini"
MAX_DIALOGS = 5

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üéí –®–∫–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º"), KeyboardButton("üéì –£–Ω–∏–≤–µ—Ä/–ö–æ–ª–ª–µ–¥–∂")],
        [KeyboardButton("üíº –†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º"), KeyboardButton("üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥")],
        [KeyboardButton("üìö –ö–æ–Ω—Å–ø–µ–∫—Ç"), KeyboardButton("ü§î –û–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–Ω—è—Ç–Ω–æ")],
        [KeyboardButton("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"), KeyboardButton("üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_system_prompt(mode: str) -> str:
    base_prompt = """
–í–°–ï–ì–î–ê —Å–æ–±–ª—é–¥–∞–π —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown —Ä–∞–∑–º–µ—Ç–∫—É (**–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, ### –∑–∞–≥–æ–ª–æ–≤–∫–∏)
2. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: -, ‚Ä¢, —Ü–∏—Ñ—Ä—ã
4. –†–∞–∑–¥–µ–ª—è–π –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ Word
6. –ò—Å–ø–æ–ª—å–∑—É–π –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
7. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –ø–∏—à–∏ –∏—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
    
    prompts = {
        "school": base_prompt + """
–¢—ã - –¥–æ–±—Ä—ã–π –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–∞.
–û–±—ä—è—Å–Ω—è–π –≤—Å—ë –ø—Ä–æ—Å—Ç–æ, –ø–æ—à–∞–≥–æ–≤–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∂–∏–∑–Ω–∏.

–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –∏ –ù–ï –£–ü–û–ú–ò–ù–ê–ô:
- —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—é, —Å–∏–Ω—É—Å—ã/–∫–æ—Å–∏–Ω—É—Å—ã
- –ª–æ–≥–∞—Ä–∏—Ñ–º—ã, —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—ã
- –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ

–ï—Å–ª–∏ —Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —ç—Ç–∏—Ö –ø–æ–Ω—è—Ç–∏–π - —Å–∫–∞–∂–∏, —á—Ç–æ —ç—Ç–æ –ø–æ–∫–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —à–∫–æ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É.
–î–∞–≤–∞–π –ø–æ–ª–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã.
""",
        
        "university": base_prompt + """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç—É —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–ª–∏ –∫–æ–ª–ª–µ–¥–∂–∞.
–î–∞–≤–∞–π –≥–ª—É–±–æ–∫–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.
–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –Ω–æ –ø–æ—è—Å–Ω—è–π –µ—ë.
–ü–æ–º–æ–≥–∞–π —Å –∞–Ω–∞–ª–∏–∑–æ–º, –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–º –ø–∏—Å—å–º–æ–º, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã.
""",
        
        "work": base_prompt + """
–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º.
–ü–æ–º–æ–≥–∞–π —Å –ø–∏—Å—å–º–∞–º–∏, –∞–Ω–∞–ª–∏–∑–æ–º, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏.
–ò–∑–±–µ–≥–∞–π –∂–∞—Ä–≥–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–º–µ—Å—Ç–µ–Ω.
–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–µ –±–∏–∑–Ω–µ—Å-–¥–æ–∫—É–º–µ–Ω—Ç—ã.
""",
        
        "free": base_prompt + """
–¢—ã - —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.
–û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞–π —Å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º.
""",
        
        "summary": base_prompt + """
–¢—ã - –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤.
–ü—Ä–µ–≤—Ä–∞—Ç–∏ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç:
- –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–∑–∏—Å—ã
- –æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã  
- –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
–°–¥–µ–ª–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–µ–≥–∫–æ —É—Å–≤–∞–∏–≤–∞–µ–º–æ–π.
""",
        
        "explain": base_prompt + """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
–ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–æ–≥–∏–∏, –ø—Ä–∏–º–µ—Ä—ã, –ø–æ—à–∞–≥–æ–≤—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.
–ü—Ä–æ–≤–µ—Ä—è–π, –ø–æ–Ω—è—Ç–Ω–æ –ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
"""
    }
    return prompts.get(mode, base_prompt)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    db.save_user(user_id, user.username, user.first_name)
    db.set_user_session(user_id, "free", 1)
    
    welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É —Å —É—á—ë–±–æ–π, —Ä–∞–±–æ—Ç–æ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—é.

–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏ –ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –≤—Å—ë –≥–æ—Ç–æ–≤–æ!"""
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìã **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**

1. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∫–Ω–æ–ø–∫–æ–π:
   - üéí –®–∫–æ–ª—å–Ω—ã–π ‚Äî –±–µ–∑ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏–∏ –∏ –ª–æ–≥–∞—Ä–∏—Ñ–º–æ–≤
   - üéì –£–Ω–∏–≤–µ—Ä/–ö–æ–ª–ª–µ–¥–∂ ‚Äî –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
   - üíº –†–∞–±–æ—Ç–∞ ‚Äî –¥–µ–ª–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
   - üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è
   - üìö –ö–æ–Ω—Å–ø–µ–∫—Ç ‚Äî —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç
   - ü§î –û–±—ä—è—Å–Ω–∏—Ç—å ‚Äî —Ä–∞–∑–∂–µ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ–µ

2. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç.

3. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –ñ–º–∏ ¬´üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥¬ª.

4. –£ —Ç–µ–±—è –¥–æ **5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤**. 
   –ñ–º–∏ ¬´üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏¬ª, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏.

–ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
    """
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith("delete_dialog_"):
        dialog_id = int(data.split("_")[-1])
        db.delete_dialog(user_id, dialog_id)
        await query.edit_message_text(f"üóë –î–∏–∞–ª–æ–≥ {dialog_id} —É–¥–∞–ª—ë–Ω.")
        # –í–µ—Ä–Ω—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫
        await asyncio.sleep(2)
        await show_all_dialogs(update, context, from_callback=True)
    elif data == "back_to_dialogs":
        await show_all_dialogs(update, context, from_callback=True)

async def show_all_dialogs(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback=False):
    user_id = update.callback_query.from_user.id if from_callback else update.message.from_user.id
    
    summaries = db.get_all_dialogs_summary(user_id)
    active_count = sum(1 for v in summaries.values() if v is not None)
    
    text = "üìÅ –í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏ (–º–∞–∫—Å. 5):\n\n"
    buttons = []
    
    for did in range(1, MAX_DIALOGS + 1):
        desc = summaries[did] or "–ü—É—Å—Ç–æ"
        text += f"{did}. {desc}\n"
        if summaries[did]:  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –ø—É—Å—Ç–æ–π
            buttons.append(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {did}", callback_data=f"delete_dialog_{did}"))
    
    if active_count >= MAX_DIALOGS:
        text += "\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–∏–∞–ª–æ–≥–æ–≤ (5). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
    
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if buttons:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dialogs"))
        reply_markup = InlineKeyboardMarkup([buttons[i:i+3] for i in range(0, len(buttons), 3)])
    else:
        reply_markup = None
    
    if from_callback:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user = update.message.from_user
    user_id = user.id
    db.save_user(user_id, user.username, user.first_name)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if user_message == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥":
        current_mode, current_dialog = db.get_user_session(user_id)
        summaries = db.get_all_dialogs_summary(user_id)
        active_count = sum(1 for v in summaries.values() if v is not None)
        
        if active_count >= MAX_DIALOGS:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. "
                "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —á–µ—Ä–µ–∑ ¬´üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏¬ª.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π dialog_id
        new_dialog_id = next((i for i in range(1, MAX_DIALOGS + 1) if summaries[i] is None), 1)
        db.set_user_session(user_id, current_mode, new_dialog_id)
        db.clear_conversation_history(user_id, new_dialog_id)
        await update.message.reply_text(
            f"üîÑ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ‚Ññ{new_dialog_id}! –†–µ–∂–∏–º: {current_mode}. –ü–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            reply_markup=get_main_keyboard()
        )
        return

    elif user_message == "üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏":
        await show_all_dialogs(update, context)
        return

    elif user_message == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    mode_map = {
        "üéí –®–∫–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º": "school",
        "üéì –£–Ω–∏–≤–µ—Ä/–ö–æ–ª–ª–µ–¥–∂": "university",
        "üíº –†–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º": "work",
        "üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥": "free",
        "üìö –ö–æ–Ω—Å–ø–µ–∫—Ç": "summary",
        "ü§î –û–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–Ω—è—Ç–Ω–æ": "explain"
    }
    
    if user_message in mode_map:
        current_mode, current_dialog = db.get_user_session(user_id)
        new_mode = mode_map[user_message]
        db.set_user_session(user_id, new_mode, current_dialog)
        mode_names = {
            "school": "üéí –®–∫–æ–ª—å–Ω—ã–π",
            "university": "üéì –£–Ω–∏–≤–µ—Ä/–ö–æ–ª–ª–µ–¥–∂",
            "work": "üíº –†–∞–±–æ—á–∏–π",
            "free": "üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π",
            "summary": "üìö –ö–æ–Ω—Å–ø–µ–∫—Ç",
            "explain": "ü§î –û–±—ä—è—Å–Ω–∏—Ç—å"
        }
        await update.message.reply_text(
            f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {mode_names[new_mode]}! –ü–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            reply_markup=get_main_keyboard()
        )
        return

    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ AI
    current_mode, current_dialog = db.get_user_session(user_id)
    db.save_conversation(user_id, "user", user_message, current_mode, current_dialog)
    
    await update.message.chat.send_action(action="typing")
    thinking_msg = await update.message.reply_text("üí≠ –î—É–º–∞—é...")
    
    system_prompt = get_system_prompt(current_mode)
    history = db.get_conversation_history(user_id, current_dialog, limit=3)
    
    messages = [{"role": "system", "content": system_prompt}]
    for role, content, _ in history:
        messages.append({"role": role, "content": content})
    messages.append({"role": "user", "content": user_message})
    
    try:
        ai_response = await asyncio.get_event_loop().run_in_executor(
            None, lambda: query_openrouter_sync(messages, AI_MODEL)
        )
        await thinking_msg.delete()
        db.save_conversation(user_id, "assistant", ai_response, current_mode, current_dialog)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–∞—Å—Ç—è–º–∏
        if len(ai_response) > 4096:
            for i in range(0, len(ai_response), 4096):
                await update.message.reply_text(ai_response[i:i+4096], reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(ai_response, reply_markup=get_main_keyboard())
            
    except Exception as e:
        await thinking_msg.delete()
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())

def query_openrouter_sync(messages: list, model: str = AI_MODEL) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPEN_ROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "messages": messages,
        "max_tokens": 15000
    }
    try:
        response = requests.post(url, headers=headers, json=data, timeout=60)
        response.raise_for_status()
        result = response.json()
        if 'choices' in result and len(result['choices']) > 0:
            return result['choices'][0]['message']['content']
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")

def main():
    db.init_db()
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_error_handler(error_handler)
    
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –º–æ–¥–µ–ª—å—é {AI_MODEL}...")
    app.run_polling(poll_interval=3)

if __name__ == '__main__':
    main()