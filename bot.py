import os
import asyncio
import requests
import secrets
import string
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
from db import Database
from supabase_http import supabase

load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPEN_ROUTER_API_KEY = os.getenv('OPEN_ROUTER_API_KEY')
WEBSITE_URL = os.getenv('WEBSITE_URL', 'https://your-website.com')

db = Database()
AI_MODEL = "openai/gpt-4o-mini"
MAX_DIALOGS = 5

def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥")],
        [KeyboardButton("üåê –î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É"), KeyboardButton("üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")],
        [KeyboardButton("üëÄ –ú–æ–∏ –¥–∏–∞–ª–æ–≥–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_system_prompt() -> str:
    return """
–í–°–ï–ì–î–ê —Å–æ–±–ª—é–¥–∞–π —ç—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
1. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown —Ä–∞–∑–º–µ—Ç–∫—É (**–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, ### –∑–∞–≥–æ–ª–æ–≤–∫–∏)
2. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: -, ‚Ä¢, —Ü–∏—Ñ—Ä—ã
4. –†–∞–∑–¥–µ–ª—è–π –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–∞–∫, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ Word
6. –ò—Å–ø–æ–ª—å–∑—É–π –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
7. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –ø–∏—à–∏ –∏—Ö —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–¢—ã - —É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞–π —Å —É—á–µ–±–æ–π, —Ä–∞–±–æ—Ç–æ–π, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º –∏ –ª—é–±—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
"""

def generate_credentials():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç–∞"""
    login_suffix = ''.join(secrets.choice(string.digits) for _ in range(6))
    login = f"user_{login_suffix}"
    
    alphabet = string.ascii_letters + string.digits
    password = ''.join(secrets.choice(alphabet) for _ in range(8))
    
    return login, password

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    db.save_user(user_id, user.username, user.first_name)
    db.set_user_session(user_id, "general", 1)
    
    welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è, —É—á–µ–±—ã –∏ —Ä–∞–±–æ—Ç—ã.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è –ø–æ–º–æ–≥—É!

–ß—Ç–æ —É–º–µ—é:
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π –∏ —Ä–∞–±–æ—Ç–æ–π
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –∏ –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω–æ–µ
‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"""
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:

üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –¥–∏–∞–ª–æ–≥—É
üåê –î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç–∞
üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É (–¥–æ 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤)
üëÄ –ú–æ–∏ –¥–∏–∞–ª–æ–≥–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–∏–∞–ª–æ–≥–∞–º–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!

–ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
    """
    await update.message.reply_text(help_text, reply_markup=get_main_keyboard())

async def website_access_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É"""
    user = update.message.from_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ credentials –≤ Supabase
    existing_credentials = supabase.get_website_credentials(user_id)
    
    if existing_credentials:
        login = existing_credentials['login']
        password = existing_credentials['password']
        subscription_type = existing_credentials.get('subscription_type', 'free')
        is_active = existing_credentials.get('is_active', True)
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ credentials
        login, password = generate_credentials()
        supabase.save_website_credentials(user_id, login, password, 'free')
        subscription_type = 'free'
        is_active = True
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å code –±–ª–æ–∫–∞–º–∏ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    access_text = f"""
üåê –î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É

üìç –°–∞–π—Ç: {WEBSITE_URL}
–õ–æ–≥–∏–Ω: {login}
–ü–∞—Ä–æ–ª—å: {password}


üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
üé´ –¢–∞—Ä–∏—Ñ: {subscription_type}

‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º.
"""

    await update.message.reply_text(access_text, reply_markup=get_main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith("delete_dialog_"):
        dialog_id = int(data.split("_")[-1])
        db.delete_dialog(user_id, dialog_id)
        await query.edit_message_text(f"üóë –î–∏–∞–ª–æ–≥ {dialog_id} —É–¥–∞–ª—ë–Ω.")
        await asyncio.sleep(2)
        await show_all_dialogs(update, context, from_callback=True)
    elif data == "back_to_dialogs":
        await show_all_dialogs(update, context, from_callback=True)

async def show_all_dialogs(update: Update, context: ContextTypes.DEFAULT_TYPE, from_callback=False):
    user_id = update.callback_query.from_user.id if from_callback else update.message.from_user.id
    
    summaries = db.get_all_dialogs_summary(user_id)
    active_count = sum(1 for v in summaries.values() if v is not None)
    
    text = "üìÅ –í–∞—à–∏ –¥–∏–∞–ª–æ–≥–∏ (–º–∞–∫—Å. 5):\n\n"
    buttons = []
    
    for did in range(1, MAX_DIALOGS + 1):
        desc = summaries[did] or "–ü—É—Å—Ç–æ"
        text += f"{did}. {desc}\n"
        if summaries[did]:
            buttons.append(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {did}", callback_data=f"delete_dialog_{did}"))
    
    if active_count >= MAX_DIALOGS:
        text += "\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–∏–∞–ª–æ–≥–æ–≤ (5). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ."
    
    if buttons:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dialogs"))
        reply_markup = InlineKeyboardMarkup([buttons[i:i+3] for i in range(0, len(buttons), 3)])
    else:
        reply_markup = None
    
    if from_callback:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user = update.message.from_user
    user_id = user.id
    db.save_user(user_id, user.username, user.first_name)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if user_message == "üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥":
        current_mode, current_dialog = db.get_user_session(user_id)
        summaries = db.get_all_dialogs_summary(user_id)
        active_count = sum(1 for v in summaries.values() if v is not None)
        
        if active_count >= MAX_DIALOGS:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. "
                "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —á–µ—Ä–µ–∑ ¬´üëÄ –ú–æ–∏ –¥–∏–∞–ª–æ–≥–∏¬ª.",
                reply_markup=get_main_keyboard()
            )
            return
        
        new_dialog_id = next((i for i in range(1, MAX_DIALOGS + 1) if summaries[i] is None), 1)
        db.set_user_session(user_id, "general", new_dialog_id)
        db.clear_conversation_history(user_id, new_dialog_id)
        await update.message.reply_text(
            f"üîÑ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ‚Ññ{new_dialog_id}! –ü–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.",
            reply_markup=get_main_keyboard()
        )
        return

    elif user_message == "üëÄ –ú–æ–∏ –¥–∏–∞–ª–æ–≥–∏":
        await show_all_dialogs(update, context)
        return

    elif user_message == "üåê –î–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É":
        await website_access_command(update, context)
        return

    elif user_message == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return

    elif user_message == "üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        current_mode, current_dialog = db.get_user_session(user_id)
        await update.message.reply_text(
            f"üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ ‚Ññ{current_dialog}. –ü–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
            reply_markup=get_main_keyboard()
        )
        return

    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ AI
    current_mode, current_dialog = db.get_user_session(user_id)
    db.save_conversation(user_id, "user", user_message, "general", current_dialog)
    
    await update.message.chat.send_action(action="typing")
    thinking_msg = await update.message.reply_text("üí≠ –î—É–º–∞—é...")
    
    system_prompt = get_system_prompt()
    history = db.get_conversation_history(user_id, current_dialog, limit=3)
    
    messages = [{"role": "system", "content": system_prompt}]
    for role, content, _ in history:
        messages.append({"role": role, "content": content})
    messages.append({"role": "user", "content": user_message})
    
    try:
        ai_response = await asyncio.get_event_loop().run_in_executor(
            None, lambda: query_openrouter_sync(messages, AI_MODEL)
        )
        await thinking_msg.delete()
        db.save_conversation(user_id, "assistant", ai_response, "general", current_dialog)
        
        if len(ai_response) > 4096:
            for i in range(0, len(ai_response), 4096):
                await update.message.reply_text(ai_response[i:i+4096], reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(ai_response, reply_markup=get_main_keyboard())
            
    except Exception as e:
        await thinking_msg.delete()
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())

def query_openrouter_sync(messages: list, model: str = AI_MODEL) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPEN_ROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "messages": messages,
        "max_tokens": 15000
    }
    try:
        response = requests.post(url, headers=headers, json=data, timeout=60)
        response.raise_for_status()
        result = response.json()
        if 'choices' in result and len(result['choices']) > 0:
            return result['choices'][0]['message']['content']
        else:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"Update {update} caused error {context.error}")

def main():
    db.init_db()
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_error_handler(error_handler)
    
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –º–æ–¥–µ–ª—å—é {AI_MODEL}...")
    app.run_polling(poll_interval=3)

if __name__ == '__main__':
    main()